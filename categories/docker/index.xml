<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on LeaveIt</title>
    <link>https://metrillin.github.io/categories/docker/</link>
    <description>Recent content in Docker on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Oct 2020 18:27:07 +0800</lastBuildDate>
    
	<atom:link href="https://metrillin.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Opencv视频流处理方法</title>
      <link>https://metrillin.github.io/2020/opencv%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 15 Oct 2020 18:27:07 +0800</pubDate>
      
      <guid>https://metrillin.github.io/2020/opencv%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid>
      <description>opencv视频流处理方法 OpenCV提供了VideoCapture类和VideoWriter类来支持各种格式的视频流，支持的格式类型会因系统的不同而有所变化，但基本上都是支持avi格式的，且对于视频文件和摄像头画面的读写所用到的接口基本上都相同，因此，我们把它们放在一起来讲了。
1. 获取VideoCapture类实例
不管是读取视频文件还是捕获摄像头画面，都使用到了VideoCapture类，但不同的是传入的形参不一样，如果我们传给VideoCapture类的是一个视频文件路径那么将是读取来自视频文件的画面，而如果我们传给VideoCapture类的是摄像头编号那么将是读取来自摄像头的画面，其使用示例如下：
 # 获取VideoCapture类实例，读取视频文件 fcap = cv2.VideoCapture(&#39;demo.mp4&#39;) # 读取摄像头画面 ccap = cv2.VideoCapture(0)  对于摄像头编号，可以使用如下命令获取：
 ls -al /dev/ | grep video  对于输出信息以video开头的其数字后缀即为可能的摄像头编号，如果一台电脑有多个摄像头设备，那么将会出现从0开始的多个摄像头编号。
2. 判断获取VideoCapture实例是否成功
如果传入无效的视频文件或摄像头编号，那么VideoCapture类将会在后续的read()接口返回（False，None），为了避免此类事件发生，可以通过VideoCapture类的isOpened()接口进行判断，该接口返回一个boolean值，正常获取实例返回True，否则返回False，其使用示例如下：
 # 判断是否正确获取VideoCapture类实例 while fcap.isOpened(): # next step operation  3. 获取视频流信息
一般视频流主要的帧信息包含画面宽高还有帧率，对于视频文件，则会多出整个视频流多少帧，因此，我们一般主要关注这四个视频流信息即可，而我们用到的则是VideoCapture类的get接口，其使用示例如下：
 # 获取视频帧的宽 w = fcap.get(cv2.CAP_PROP_FRAME_WIDTH) # 获取视频帧的高 h = fcap.get(cv2.CAP_PROP_FRAME_HEIGHT) # 获取视频帧的帧率 fps = fcap.get(cv2.CAP_PROP_FPS)  获取到的帧率对于摄像头设备来说，如果所使用的终端不支持查询，那么将会返回0值，且该值也不是非常精确的。
 # 获取视频流的总帧数 fcount = fcap.get(cv2.CAP_PROP_FRAME_COUNT)  注意这个是对视频文件才有意义，对于摄像头是没意义的，且以上获取到的返回信息均是浮点型的，注意转换为整型。</description>
    </item>
    
    <item>
      <title>Docker实例</title>
      <link>https://metrillin.github.io/2020/docker%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Tue, 05 May 2020 21:21:43 +0800</pubDate>
      
      <guid>https://metrillin.github.io/2020/docker%E5%AE%9E%E4%BE%8B/</guid>
      <description>[TOC]
1. docker实例 下面使用ubuntu:18.04作为例子
1.1. 镜像使用 1.1.1. 获取镜像 docker pull ubuntu:18.04  等待下载完成后,查看宿主机镜像
docker images  我们可以看刚刚下载下来的镜像 1.1.2. 运行镜像 docker run -it ubuntu:18.04 bash  此时我们即启动了该镜像 此处需要说明，每一次使用镜像运行，都会生成一个容器,退出的容器并不会立即删除，除非手动 docker rm,如果不需要排障和保留结果可以使用以下命令
docker run -it --rm ubuntu:18.04 bash   &amp;ndash;rm 参数使docker不会保留该容器，会在容器退出后将其删除
1.1.3. 操作容器 当使用docker run -it ubuntu:18.04 bash会在本地生成一个容器，容器和镜像的关系相当于对象和类，查看本地容器
docker ps -a  启动一个已经停止的容器
docker start b8ed1b0ee812 //containerID/name  捕获一个正在运行的容器，使其转到前台bash
docker attach b8ed1b0ee812 //containerID/name  attach捕获后推出容器，此容器会停止，如果想推出后继续在后台运行使用exec命令
docker exec -it b8ed1b0ee812 /bin/bash  1.</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>https://metrillin.github.io/2020/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 06 Apr 2020 21:19:44 +0800</pubDate>
      
      <guid>https://metrillin.github.io/2020/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>docker常用命令 示例 1.helloworld的调用 从仓库将image抓取到本地
docker image pull library/hello-world  docker image pull是抓取image文件的命令。ibrary/hello-world是镜像文件在仓库的位置，其中library是image文件所在的组，hello-world是 image 文件的名字。
获得管理员权限（对宿主机的访问）
docker run -it --privileged --rm ubuntu:18.04 bash  查看本地镜像文件:
docker image ls  运行镜像，会生成一个容器实例，镜像和容器的关系就像是类和对象的关系。 查看当前所有容器 &amp;gt; docker container ls
查看当前电脑所有容器，包括终止运行的容器 &amp;gt; docker container ls &amp;ndash;all
终止运行的容器文件，依然会占据硬盘空间，下面是删除指令 &amp;gt; docker container rm [containerID]
除过以上我们使用的Docker命令外，Docker还有一些其它常用的命令
拉取docker镜像
docker pull image_name  设置docker开机自启动
systemctl enable docker  从镜像中构建容器
docker run -it ubuntu:18.04 bash  从镜像中构建容器，退出容器后不保留容器
docker run -it --rm ubuntu:18.</description>
    </item>
    
    <item>
      <title>Docker安装</title>
      <link>https://metrillin.github.io/2020/docker%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 05 Apr 2020 21:18:19 +0800</pubDate>
      
      <guid>https://metrillin.github.io/2020/docker%E5%AE%89%E8%A3%85/</guid>
      <description>docker安装 ## 安装
1.卸载旧版本 Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：
sudo apt-get remove docker docker-engine docker.io containerd runc  2.使用 APT 安装 sudo apt-get update  安装 apt 依赖包，用于通过HTTPS来获取仓库:
sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common  为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥 添加 Docker 的官方 GPG 密钥：
$ curl \-fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt\-key add \-  9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</description>
    </item>
    
  </channel>
</rss>